// Mocks generated by Mockito 5.4.5 from annotations
// in food_ordering_app/test/mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:food_ordering_app/data/models/cart_item.dart' as _i9;
import 'package:food_ordering_app/data/models/menu_item.dart' as _i7;
import 'package:food_ordering_app/data/models/order.dart' as _i2;
import 'package:food_ordering_app/data/models/restaurant.dart' as _i5;
import 'package:food_ordering_app/data/repositories/menu_repository.dart'
    as _i6;
import 'package:food_ordering_app/data/repositories/order_repository.dart'
    as _i8;
import 'package:food_ordering_app/data/repositories/restaurant_repository.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeOrder_0 extends _i1.SmartFake implements _i2.Order {
  _FakeOrder_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [RestaurantRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockRestaurantRepository extends _i1.Mock
    implements _i3.RestaurantRepository {
  MockRestaurantRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i5.Restaurant>> getRestaurants() =>
      (super.noSuchMethod(
            Invocation.method(#getRestaurants, []),
            returnValue: _i4.Future<List<_i5.Restaurant>>.value(
              <_i5.Restaurant>[],
            ),
          )
          as _i4.Future<List<_i5.Restaurant>>);
}

/// A class which mocks [MenuRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockMenuRepository extends _i1.Mock implements _i6.MenuRepository {
  MockMenuRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i7.MenuItem>> getMenuItems(String? restaurantId) =>
      (super.noSuchMethod(
            Invocation.method(#getMenuItems, [restaurantId]),
            returnValue: _i4.Future<List<_i7.MenuItem>>.value(<_i7.MenuItem>[]),
          )
          as _i4.Future<List<_i7.MenuItem>>);
}

/// A class which mocks [OrderRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockOrderRepository extends _i1.Mock implements _i8.OrderRepository {
  MockOrderRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> addToCart(_i9.CartItem? item) =>
      (super.noSuchMethod(
            Invocation.method(#addToCart, [item]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<List<_i9.CartItem>> getCart() =>
      (super.noSuchMethod(
            Invocation.method(#getCart, []),
            returnValue: _i4.Future<List<_i9.CartItem>>.value(<_i9.CartItem>[]),
          )
          as _i4.Future<List<_i9.CartItem>>);

  @override
  _i4.Future<void> clearCart() =>
      (super.noSuchMethod(
            Invocation.method(#clearCart, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<_i2.Order> placeOrder(List<_i9.CartItem>? items) =>
      (super.noSuchMethod(
            Invocation.method(#placeOrder, [items]),
            returnValue: _i4.Future<_i2.Order>.value(
              _FakeOrder_0(this, Invocation.method(#placeOrder, [items])),
            ),
          )
          as _i4.Future<_i2.Order>);
}
